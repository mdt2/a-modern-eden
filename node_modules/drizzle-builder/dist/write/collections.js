'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _write = require('../utils/write');

var writePage = _write.writePage;

var _error = require('../utils/error');

var DrizzleError = _interopRequireDefault(_error).default;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var hasCollection = function hasCollection(patterns) {
  return patterns.hasOwnProperty('collection');
};
var isCollection = function isCollection(patterns) {
  return patterns.hasOwnProperty('items');
};

/**
 * Traverse patterns object and write out any collection objects to files.
 *
 * @param {Object} pages   current level of pages tree
 * @param {Object} drizzleData
 * @param {Array} writePromises All write promises so far
 * @return {Array} of Promises
 */
function walkCollections(patterns, drizzleData) {
  var writePromises = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  if (hasCollection(patterns)) {
    writePromises.push(writePage(patterns.collection.id, patterns.collection, drizzleData.options.dest.patterns, drizzleData.options.keys.collections.plural));
  }
  for (var patternKey in patterns) {
    if (!isCollection(patterns[patternKey])) {
      walkCollections(patterns[patternKey], drizzleData, writePromises);
    }
  }
  return writePromises;
}

/**
 * Traverse the patterns object and write out collections HTML pages.
 *
 * @param {Object} drizzleData
 * @return {Promise} resolving to {Object} drizzleData
 */
function writeCollections(drizzleData) {
  return Promise.all(walkCollections(drizzleData.patterns, drizzleData)).then(function (writePromises) {
    return drizzleData;
  }, function (error) {
    return DrizzleError.error(error, drizzleData.options.debug);
  });
}

exports.default = writeCollections;
module.exports = exports['default'];