'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _write = require('../utils/write');

var writePage = _write.writePage;

var _error = require('../utils/error');

var DrizzleError = _interopRequireDefault(_error).default;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isPage = function isPage(page) {
  return page.hasOwnProperty('contents');
};

/**
 * Traverse pages object and write out any page objects to files. An object
 * is considered a page if it has a `contents` property.
 *
 * @param {Object} pages   current level of pages tree
 * @param {Object} drizzleData
 * @param {Array} writePromises All write promises so far
 * @return {Array} of Promises
 */
function walkPages(pages, drizzleData) {
  var writePromises = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  if (isPage(pages)) {
    return writePage(pages.id, pages, drizzleData.options.dest.pages, drizzleData.options.keys.pages.plural);
  }
  for (var pageKey in pages) {
    writePromises = writePromises.concat(walkPages(pages[pageKey], drizzleData, writePromises));
  }
  return writePromises;
}

/**
 * Write out HTML pages for pages data.
 *
 * @param {Object} drizzleData
 * @return {Promise} resolving to drizzleData
 */
function writePages(drizzleData) {
  return Promise.all(walkPages(drizzleData.pages, drizzleData)).then(function () {
    return drizzleData;
  }, function (error) {
    return DrizzleError.error(error, drizzleData.options.debug);
  });
}

exports.default = writePages;
module.exports = exports['default'];