'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _object = require('../utils/object');

var resourceId = _object.resourceId;

var _parse = require('../utils/parse');

var readFiles = _parse.readFiles;

var _error = require('../utils/error');

var DrizzleError = _interopRequireDefault(_error).default;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Register the files matching `src.glob` as partials. Keys are generated by
 * using path relative to `src.basedir` separated by `.`
 * @param {Object} src    Object with `path` and `basedir` props
 *                        @see defaults
 * @param {Object} options
 * @param {String} prefix Gets passed to `resourceId` as the
 *                        `resourceCollection` argument. @see utils/object
 * @return {Promise}
 */
function registerPartials(src, options) {
  var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

  return readFiles(src.glob, options).then(function (partialFiles) {
    partialFiles.forEach(function (partialFile) {
      var partialKey = resourceId(partialFile, src.basedir, prefix);
      if (options.handlebars.partials.hasOwnProperty(partialKey)) {
        DrizzleError.error(new DrizzleError('Partial key \'' + partialKey + '\' already\nregistered on Handlebars instance: is this intentional?', DrizzleError.LEVELS.WARN), options);
      }
      options.handlebars.registerPartial(partialKey, partialFile.contents);
    });
  });
}

/**
 * Register a glob of partials.
 * @param {Object} Handlebars instance
 * @param {String|Array} glob
 */
/**
 * Prepare/partials module.
 * @module prepare/partials
 */
function preparePartials(options) {
  return Promise.all([registerPartials(options.src.templates, options), // Partials as partials
  registerPartials(options.src.patterns, options, 'patterns') // Patterns
  ]).then(function () {
    return options;
  }, function (error) {
    return DrizzleError.error(error, options.debug);
  });
}

exports.default = preparePartials;
module.exports = exports['default'];