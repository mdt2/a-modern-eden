'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _shared = require('../utils/shared');

var keyname = _shared.keyname;

var _parse = require('../utils/parse');

var getFiles = _parse.getFiles;
var isGlob = _parse.isGlob;

var _data = require('../helpers/data');

var registerDataHelpers = _interopRequireDefault(_data).default;

var _page = require('../helpers/page');

var registerPageHelpers = _interopRequireDefault(_page).default;

var _pattern = require('../helpers/pattern');

var registerPatternHelpers = _interopRequireDefault(_pattern).default;

var _string = require('../helpers/string');

var stringHelpers = _interopRequireDefault(_string).default;

var _handlebarsLayouts = require('handlebars-layouts');

var handlebarsLayouts = _interopRequireDefault(_handlebarsLayouts).default;

var _error = require('../utils/error');

var DrizzleError = _interopRequireDefault(_error).default;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Register helpers on Handlebars. Helpers (options.helpers) can be provided as
 * either:
 * - a glob. Files matching glob will each be require'd and registered on
 *   Handlebars (one helper per module)
 * - an object. Properties are helper names/keys, values should be helper
 *   functions.
 *
 * @param {Object} options with `helpers` property
 * @return {Promise} resolving to the helpers that have been registered
 */
/**
 * Prepare/helpers module.
 * @module prepare/helpers
 */

function getHelpers(options) {
  var helpers = {};
  return new Promise(function (resolve, reject) {
    if (isGlob(options.helpers)) {
      getFiles(options.helpers).then(function (helperPaths) {
        helperPaths.forEach(function (hPath) {
          helpers[keyname(hPath)] = require(hPath);
        });
        resolve(helpers);
      });
    } else {
      resolve(options.helpers);
    }
  });
}

/**
 * Register helpers on the passed Handlebars instance.
 * Accept an object with helperKey => helperFunctions,
 * or a glob (as Array or string) of files (modules) to
 * register. In the latter case, the filename w/o extension
 * will be used as the helper key.
 *
 * @param {Object} options
 * @return {Promise} that resolves to all helpers registered on Handlebars
 */
function prepareHelpers(options) {
  // Register helper for layouts, from the module
  options.handlebars.registerHelper(handlebarsLayouts(options.handlebars));
  return getHelpers(options).then(function (helpers) {
    registerPatternHelpers(options);
    registerDataHelpers(options);
    registerPageHelpers(options);

    options.handlebars.registerHelper('ns', stringHelpers.ns(options.handlebars, { prefix: 'drizzle-' }));

    for (var helper in helpers) {
      options.handlebars.registerHelper(helper, helpers[helper]);
    }
    return options;
  }, function (error) {
    return DrizzleError.error(error, options.debug);
  });
}

exports.default = prepareHelpers;
module.exports = exports['default'];