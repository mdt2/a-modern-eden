'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resourceContext = exports.patternContext = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; // TODO NOPE


var _object = require('./object');

var deepCollection = _object.deepCollection;

var _shared = require('./shared');

var resourcePath = _shared.resourcePath;

var _path = require('path');

var path = _interopRequireDefault(_path).default;

var _ramda = require('ramda');

var pathSatisfies = _ramda.pathSatisfies;
var is = _ramda.is;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This will return a relative URL prefix for a given resource (anything being
 * output to an HTML file).
 *
 * The purpose of this to value is to be assigned to the `{{baseurl}}` template
 * context property, for use in relative URLs within the HTML.
 *
 * This relative path is determined by the path-based ID of the resource (e.g.
 * patterns.components.button) and the `dest` configration settings for the
 * `resourceType` of the supplied resource (e.g. 'page', 'pattern').
 *
 * @param {Object} resource
 * @param {Object} drizzleData
 * @return {String}
 *
 * @example
 * getBaseUrl(somePageResource, drizzleData);
 * // '../..'
 */
function getBaseUrl(resource, drizzleData) {
  var options = drizzleData.options;
  var destRoot = options.dest.root;
  var destResource = options.dest[Object.keys(options.keys).find(function (key) {
    return options.keys[key].singular === resource.resourceType;
  })];

  var baseurl = path.relative(path.dirname(resourcePath(resource.id, destResource)), destRoot);

  return baseurl === '' ? '.' + baseurl : baseurl;
}

function resourceContext(resource, drizzleData) {
  var context = Object.assign({}, resource);
  context.drizzle = drizzleData;

  if (pathSatisfies(is(String), ['dest', 'root'], drizzleData.options)) {
    context.baseurl = getBaseUrl(resource, drizzleData);
  }

  if (_typeof(resource.data) === 'object') {
    Object.keys(resource.data).map(function (dataKey) {
      return context[dataKey] = resource.data[dataKey];
    });
    delete context.data;
  }
  return context;
}

/**
 */
function patternContext(pattern, drizzleData) {
  var context = resourceContext(pattern, drizzleData);
  // Get the collection for this pattern and add a reference to it
  context.collection = deepCollection(pattern.id, drizzleData.patterns);
  return context;
}

exports.patternContext = patternContext;
exports.resourceContext = resourceContext;