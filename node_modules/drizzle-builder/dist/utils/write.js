'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.writePage = exports.write = undefined;

var _path = require('path');

var path = _interopRequireDefault(_path).default;

var _bluebird = require('bluebird');

var Promise = _interopRequireDefault(_bluebird).default;

var _fs = require('fs');

var writeFileCB = _fs.writeFile;

var _mkdirp = require('mkdirp');

var mkdirpCB = _mkdirp.mkdirp;

var _shared = require('./shared');

var resourcePath = _shared.resourcePath;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var writeFile = Promise.promisify(writeFileCB);
var mkdirp = Promise.promisify(mkdirpCB);

/**
 * Write `contents` to path at `filepath`
 * @param {String} filepath
 * @param {String} contents
 * @return {Promise}
 */
function write(filepath, contents) {
  return mkdirp(path.dirname(filepath)).then(function () {
    return writeFile(filepath, contents);
  });
}

/**
 * Take an object's contents and write them to an HTML file on the filesystem.
 * @param {String} resourceId   e.g. pages.follow-me.down `.`-separated ID
 *                              representing the hierarchical position of the
 *                              resource in its object structure. Will be used
 *                              to derive output path.
 * @param {Object} resourceObj  The object to output. Must have `contents` prop
 * @param {String} pathPrefix   The output path prefix (as defined in
 *                              options.destâ€”@see defaults).
 * @return {Promise}
 */
function writePage(resourceId, resourceObj, pathPrefix) {
  var outputPath = resourcePath(resourceId, pathPrefix);
  resourceObj.outputPath = outputPath;
  return write(outputPath, resourceObj.contents);
}

exports.write = write;
exports.writePage = writePage;