'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = register;

var _ramda = require('ramda');

var R = _interopRequireDefault(_ramda).default;

var _path = require('path');

var relativePath = _path.relative;

var _object = require('../utils/object');

var splitPath = _object.splitPath;

var _list = require('../utils/list');

var sortByProp = _list.sortByProp;

var _shared = require('../utils/shared');

var resourcePath = _shared.resourcePath;
var isType = _shared.isType;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isDir = isType(undefined);

/**
 * Return an inner object/array from the Drizzle context.
 *
 * @param {String} path
 * The path string (e.g. "foo/bar/baz")
 *
 * @param {Object} drizzle
 * The Drizzle root context.
 *
 * @return {Mixed}
 * Whatever structure exists at the supplied path.
 */
function extractSubset(path, drizzle) {
  var pathBits = splitPath(path);
  var results = R.path(pathBits, drizzle);
  return results;
}

/**
 * Return a relative base path for .html destinations.
 *
 * @param {String} type
 * The resource type identifier (e.g. "page", "pattern", "collection")
 *
 * @param {Object} drizzle
 * The Drizzle root context.
 *
 * @return {String}
 * The relative base path for the supplied resource type.
 */
function destRoot(type, drizzle) {
  var options = drizzle.options;

  // TODO: this is unfortunate, and due to difficulty using defaults.keys
  var keys = new Map([['page', 'pages'], ['collection', 'collections'], ['pattern', 'patterns']]);

  return relativePath(options.dest.root, options.dest[keys.get(type)]);
}

/**
 * Return a refined object (page, pattern, etc.) representing a menu item.
 *
 * @param {Object} props
 * The "raw" object representation of a menu item.
 *
 * @param {Object} drizzle
 * The Drizzle root context.
 *
 * @return {Object}
 * The "refined" object representation of a menu item (with fewer properties
 * and a new `url` property).
 */
function menuItem(props, drizzle) {
  props.url = resourcePath(props.id, destRoot(props.resourceType, drizzle));
  return R.omit(['contents', 'items'], props);
}

function register(options) {
  var Handlebars = options.handlebars;

  Handlebars.registerHelper('pages', function () {
    var path = R.is(String, arguments.length <= 0 ? undefined : arguments[0]) ? arguments.length <= 0 ? undefined : arguments[0] : '.';
    var context = (arguments.length <= 1 ? undefined : arguments[1]) || (arguments.length <= 0 ? undefined : arguments[0]);
    var drizzle = context.data.root.drizzle;
    var options = context.hash;
    var subset = extractSubset('pages/' + path, drizzle);
    var isIgnored = R.equals(options.ignore);
    var results = [];

    for (var key in subset) {
      var item = subset[key];

      if (!isDir(item) && !isIgnored(key)) {
        results.push(menuItem(item, drizzle));
      }
    }

    if (options.sortby) {
      results = sortByProp(['data', options.sortby], results);
    }

    return results;
  });

  Handlebars.registerHelper('page', function () {
    var path = R.is(String, arguments.length <= 0 ? undefined : arguments[0]) ? arguments.length <= 0 ? undefined : arguments[0] : 'index';
    var context = (arguments.length <= 1 ? undefined : arguments[1]) || (arguments.length <= 0 ? undefined : arguments[0]);
    var drizzle = context.data.root.drizzle;
    var subset = extractSubset('pages/' + path, drizzle);
    var result = {};

    if (!isDir(subset)) {
      Object.assign(result, menuItem(subset, drizzle));
    }

    return result;
  });

  Handlebars.registerHelper('collections', function () {
    var path = R.is(String, arguments.length <= 0 ? undefined : arguments[0]) ? arguments.length <= 0 ? undefined : arguments[0] : '.';
    var context = (arguments.length <= 1 ? undefined : arguments[1]) || (arguments.length <= 0 ? undefined : arguments[0]);
    var drizzle = context.data.root.drizzle;
    var options = context.hash;
    var subset = extractSubset('patterns/' + path, drizzle);
    var isIgnored = R.equals(options.ignore);
    var results = [];

    for (var key in subset) {
      var item = subset[key];

      if (item.collection && !isIgnored(key)) {
        results.push(menuItem(item.collection, drizzle));
      }
    }

    if (options.sortby) {
      results = sortByProp([options.sortby], results);
    }

    return results;
  });

  Handlebars.registerHelper('collection', function () {
    var path = R.is(String, arguments.length <= 0 ? undefined : arguments[0]) ? arguments.length <= 0 ? undefined : arguments[0] : '.';
    var context = (arguments.length <= 1 ? undefined : arguments[1]) || (arguments.length <= 0 ? undefined : arguments[0]);
    var drizzle = context.data.root.drizzle;
    var subset = extractSubset('patterns/' + path + '/collection', drizzle);
    var result = {};

    if (!isDir(subset)) {
      Object.assign(result, menuItem(subset, drizzle));
    }

    return result;
  });

  return Handlebars;
}
module.exports = exports['default'];