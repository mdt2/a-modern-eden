'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jsBeautify = require('js-beautify');

var beautify = _jsBeautify.html;

var _error = require('../utils/error');

var DrizzleError = _interopRequireDefault(_error).default;

var _object = require('../utils/object');

var deepPattern = _object.deepPattern;

var _context = require('../utils/context');

var patternContext = _context.patternContext;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Retrieve correct pattern object data, find the right partial and
 * compile with correct local context.
 * TODO: How do we test this?
 */
function renderPatternPartial(patternId, drizzleData, Handlebars) {
  var patternObj = deepPattern(patternId, drizzleData.patterns);
  var localContext = patternContext(patternObj, drizzleData);
  var template = Handlebars.partials[patternId];
  if (typeof template !== 'undefined') {
    if (typeof template !== 'function') {
      template = Handlebars.compile(template);
    }
    // Render and return
    return template(localContext);
  } else {
    DrizzleError.error(new DrizzleError('Partial for pattern ' + patternId + ' not found', DrizzleError.LEVELS.ERROR), drizzleData.options.debug);
  }
}

/**
 * Register some drizzle-specific pattern helpers
 */
function registerPatternHelpers(options) {
  var Handlebars = options.handlebars;
  if (Handlebars.helpers.pattern) {
    DrizzleError.error(new DrizzleError('`pattern` helper already registered', DrizzleError.LEVELS.WARN), options.debug);
  }
  /**
   * The `pattern` helper allows the embedding of patterns anywhere
   * and they can get their correct local context.
   */
  Handlebars.registerHelper('pattern', function (id, rootContext, opts) {
    var renderedTemplate = renderPatternPartial(id, rootContext.drizzle, Handlebars);
    return renderedTemplate;
  });

  if (Handlebars.helpers.patternSource) {
    DrizzleError.error(new DrizzleError('`patternSource` helper already registered', DrizzleError.LEVELS.WARN), options.debug);
  }
  /**
   * Similar to `pattern` but the returned string is HTML-escaped.
   * Can be used for rendering source in `<pre>` tags.
   */
  Handlebars.registerHelper('patternSource', function (id, rootContext, opts) {
    var renderedTemplate = renderPatternPartial(id, rootContext.drizzle, Handlebars);
    var sourceMarkup = beautify(renderedTemplate, options.beautifier);
    return Handlebars.Utils.escapeExpression(sourceMarkup);
  });
  return Handlebars;
}

exports.default = registerPatternHelpers;
module.exports = exports['default'];