'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _context = require('../utils/context');

var resourceContext = _context.resourceContext;

var _render = require('../utils/render');

var applyTemplate = _render.applyTemplate;

var _object = require('../utils/object');

var deepObj = _object.deepObj;

var _shared = require('../utils/shared');

var idKeys = _shared.idKeys;

var _error = require('../utils/error');

var DrizzleError = _interopRequireDefault(_error).default;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * For any given `patterns` entry, render a pattern-collection page for
 * its `items`. Also, remove the `contents` property for individual patterns.
 * Patterns will not render individual pages. This function mutates `patterns`.
 *
 * @param {Object} patterns      The current level of the patterns tree we're
 *                               rendering
 * @param {Object} drizzleData   All the data we have, including `options`
 * @param {String} collectionKey The key of the current set of `patterns`.
 *                               Used to derive the collection's "name"
 * @return {Object}              patterns data at this level.
 */
function renderCollection(patterns, drizzleData, collectionKey) {
  var layoutKey = drizzleData.options.layouts.collection;
  var layoutObj = void 0;
  try {
    // deepObj will throw if it fails, which is good and fine...
    layoutObj = deepObj(idKeys(layoutKey), drizzleData.templates, false);
  } catch (e) {
    // But Make this error more friendly and specific
    DrizzleError.error(new DrizzleError('Could not find partial for default collection layout\n\'' + layoutKey + '\'. Check \'options.layouts.collection\' and/or\n\'options.src.templates\' values to make sure they are OK', DrizzleError.LEVELS.ERROR), drizzleData.options.debug);
  }
  patterns.collection.contents = applyTemplate(layoutObj.contents, resourceContext(patterns.collection, drizzleData), drizzleData.options);
  return patterns;
}

/**
 * Recursively walk through the patterns data object and render content
 * for "pattern collections" (any entry in `patterns` that contains an
 * `items` property).
 *
 * @param {Object} patterns     The current level of the `patterns` object.
 * @param {Object} drizzleData
 * @param {String} currentKey   The key for the current `patterns` object.
 * @return {Object} drizzleData All drizzleData
 */
function walkCollections(patterns, drizzleData) {
  var currentKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'patterns';

  for (var patternKey in patterns) {
    if (patternKey === 'collection') {
      renderCollection(patterns, drizzleData, currentKey);
    } else {
      walkCollections(patterns[patternKey], drizzleData, patternKey);
    }
  }
  return drizzleData.patterns;
}

/**
 * Render pattern collections.
 * @param {Object} drizzleData
 * @return {Object} patterns data
 */
function renderCollections(drizzleData) {
  return walkCollections(drizzleData.patterns, drizzleData);
}

exports.default = renderCollections;
module.exports = exports['default'];