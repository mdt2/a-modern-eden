'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _deepExtend = require('deep-extend');

var deepExtend = _interopRequireDefault(_deepExtend).default;

var _defaults = require('./defaults');

var defaults = _interopRequireDefault(_defaults).default;

var _bluebird = require('bluebird');

var Promise = _interopRequireDefault(_bluebird).default;

var _handlebars = require('handlebars');

var Handlebars = _interopRequireDefault(_handlebars).default;

var _path = require('path');

var path = _interopRequireDefault(_path).default;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * For relative pathing to work, let's convert all paths in src options to
 * absolute paths, if they are not already.
 * @param {Object} opts   Mutated in place.
 */
function normalizePaths(opts) {
  for (var srcKey in opts.src) {
    if (!path.isAbsolute(opts.src[srcKey].glob)) {
      opts.src[srcKey].glob = path.resolve(opts.src[srcKey].glob);
    }
    if (!path.isAbsolute(opts.src[srcKey].basedir)) {
      opts.src[srcKey].basedir = path.resolve(opts.src[srcKey].basedir);
    }
  }
}

/**
 * Merge defaults into passed options.
 * @param {Object} options
 * @param {Object} handlebars   Handlebars instanceâ€”it can be passed explicitly,
 *                              primarily for testing purposes.
 * @return {Promise} resolving to merged options
 */

function init() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var handlebars = arguments[1];

  var opts = deepExtend({}, defaults, options);
  normalizePaths(opts);
  opts.handlebars = handlebars || Handlebars.create();
  return Promise.resolve(opts);
}

exports.default = init;
module.exports = exports['default'];